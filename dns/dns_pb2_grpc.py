# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import dns_pb2 as dns__pb2


class DNSInfoStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.InitConnection = channel.unary_unary(
        '/dns.DNSInfo/InitConnection',
        request_serializer=dns__pb2.InitRequest.SerializeToString,
        response_deserializer=dns__pb2.InitResponse.FromString,
        )
    self.InitInfo = channel.unary_unary(
        '/dns.DNSInfo/InitInfo',
        request_serializer=dns__pb2.InfoRequest.SerializeToString,
        response_deserializer=dns__pb2.InfoResponse.FromString,
        )
    self.RoundHost = channel.unary_unary(
        '/dns.DNSInfo/RoundHost',
        request_serializer=dns__pb2.HostRequest.SerializeToString,
        response_deserializer=dns__pb2.HostResponse.FromString,
        )


class DNSInfoServicer(object):

  def InitConnection(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def InitInfo(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RoundHost(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DNSInfoServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'InitConnection': grpc.unary_unary_rpc_method_handler(
          servicer.InitConnection,
          request_deserializer=dns__pb2.InitRequest.FromString,
          response_serializer=dns__pb2.InitResponse.SerializeToString,
      ),
      'InitInfo': grpc.unary_unary_rpc_method_handler(
          servicer.InitInfo,
          request_deserializer=dns__pb2.InfoRequest.FromString,
          response_serializer=dns__pb2.InfoResponse.SerializeToString,
      ),
      'RoundHost': grpc.unary_unary_rpc_method_handler(
          servicer.RoundHost,
          request_deserializer=dns__pb2.HostRequest.FromString,
          response_serializer=dns__pb2.HostResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'dns.DNSInfo', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
