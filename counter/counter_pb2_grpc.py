# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import counter_pb2 as counter__pb2


class CounterStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Increment = channel.unary_unary(
        '/counter.Counter/Increment',
        request_serializer=counter__pb2.IncrementRequest.SerializeToString,
        response_deserializer=counter__pb2.IncrementResponse.FromString,
        )
    self.InitPage = channel.unary_unary(
        '/counter.Counter/InitPage',
        request_serializer=counter__pb2.InitPageRequest.SerializeToString,
        response_deserializer=counter__pb2.InitPageResponse.FromString,
        )


class CounterServicer(object):

  def Increment(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def InitPage(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CounterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Increment': grpc.unary_unary_rpc_method_handler(
          servicer.Increment,
          request_deserializer=counter__pb2.IncrementRequest.FromString,
          response_serializer=counter__pb2.IncrementResponse.SerializeToString,
      ),
      'InitPage': grpc.unary_unary_rpc_method_handler(
          servicer.InitPage,
          request_deserializer=counter__pb2.InitPageRequest.FromString,
          response_serializer=counter__pb2.InitPageResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'counter.Counter', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
